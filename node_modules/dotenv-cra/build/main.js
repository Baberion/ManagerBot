"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const dotenv_1 = require("dotenv");
const dotenv_expand_1 = __importDefault(require("dotenv-expand"));
function config(options) {
    const log = (message) => {
        (options === null || options === void 0 ? void 0 : options.debug) && console.log(`[dotenv-cra][DEBUG] ${message}`);
    };
    // Reference:
    // https://github.com/facebook/create-react-app/blob/8b7b819b4b9e6ba457e011e92e33266690e26957/packages/react-scripts/config/env.js#L18-L23
    if (!process.env.NODE_ENV) {
        throw new Error('The NODE_ENV environment variable is required but was not specified.');
    }
    const env = (options === null || options === void 0 ? void 0 : options.env) || process.env.NODE_ENV;
    const dotenvPath = (options === null || options === void 0 ? void 0 : options.path) || path_1.resolve(process.cwd(), '.env');
    // Reference:
    // https://github.com/facebook/create-react-app/blob/8b7b819b4b9e6ba457e011e92e33266690e26957/packages/react-scripts/config/env.js#L25-L34
    const dotenvFiles = [
        `${dotenvPath}.${env}.local`,
        process.env.NODE_ENV !== 'test' && `${dotenvPath}.local`,
        `${dotenvPath}.${env}`,
        dotenvPath,
    ];
    // Reference:
    // https://github.com/facebook/create-react-app/blob/8b7b819b4b9e6ba457e011e92e33266690e26957/packages/react-scripts/config/env.js#L36-L49
    let parsed = {};
    for (const dotenvFile of dotenvFiles) {
        if (!dotenvFile) {
            continue;
        }
        if (!fs_1.existsSync(dotenvFile)) {
            log(`\`${path_1.basename(dotenvFile)}\` file not found`);
            continue;
        }
        log(`loading \`${path_1.basename(dotenvFile)}\``);
        const result = dotenv_expand_1.default(dotenv_1.config({
            debug: options === null || options === void 0 ? void 0 : options.debug,
            encoding: options === null || options === void 0 ? void 0 : options.encoding,
            path: dotenvFile,
        }));
        if (result.error) {
            return result;
        }
        parsed = { ...result.parsed, ...parsed };
    }
    // Reference:
    // https://github.com/facebook/create-react-app/blob/8b7b819b4b9e6ba457e011e92e33266690e26957/packages/react-scripts/config/env.js#L72-L89
    if (options === null || options === void 0 ? void 0 : options.prefix) {
        const prefixRegExp = new RegExp(`^${options.prefix}`, 'i');
        parsed = Object.keys(parsed)
            .filter((key) => {
            const match = prefixRegExp.test(key);
            log(`Prefix for key \`${key}\` ${match ? 'matches' : 'does not match'} \`${options.prefix}\``);
            return match;
        })
            .reduce((obj, key) => {
            obj[key] = parsed[key];
            return obj;
        }, {});
    }
    return {
        parsed,
    };
}
exports.config = config;
