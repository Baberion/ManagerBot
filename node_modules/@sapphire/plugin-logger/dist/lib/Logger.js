"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const framework_1 = require("@sapphire/framework");
const colorette_1 = require("colorette");
const console_1 = require("console");
const util_1 = require("util");
const LoggerLevel_1 = require("./LoggerLevel");
/**
 * The logger class.
 * @since 1.0.0
 */
class Logger extends framework_1.Logger {
    constructor(options = {}) {
        super(options.level ?? 30 /* Info */);
        /**
         * The console this writes to.
         * @since 1.0.0
         */
        Object.defineProperty(this, "console", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The formats supported by the logger.
         * @since 1.0.0
         */
        Object.defineProperty(this, "formats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The string `write` will join values by.
         * @since 1.0.0
         */
        Object.defineProperty(this, "join", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The inspect depth when logging objects.
         * @since 1.0.0
         */
        Object.defineProperty(this, "depth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.console = new console_1.Console(options.stdout ?? process.stdout, options.stderr ?? process.stderr);
        this.formats = Logger.createFormatMap(options.format, options.defaultFormat);
        this.join = options.join ?? ' ';
        this.depth = options.depth ?? 0;
    }
    /**
     * Writes the log message given a level and the value(s).
     * @param level The log level.
     * @param values The values to log.
     */
    write(level, ...values) {
        if (level < this.level)
            return;
        const method = this.levels.get(level) ?? 'log';
        const formatter = this.formats.get(level) ?? this.formats.get(100 /* None */);
        this.console[method](formatter.run(this.preprocess(values)));
    }
    /**
     * Pre-processes an array of values.
     * @since 1.0.0
     * @param values The values to pre-process.
     */
    preprocess(values) {
        const inspectOptions = { colors: colorette_1.isColorSupported, depth: this.depth };
        return values.map((value) => (typeof value === 'string' ? value : (0, util_1.inspect)(value, inspectOptions))).join(this.join);
    }
    get levels() {
        return Reflect.get(framework_1.Logger, 'levels');
    }
    /**
     * Gets whether or not colorette is enabled.
     * @since 1.0.0
     */
    static get stylize() {
        return colorette_1.isColorSupported;
    }
    static createFormatMap(options = {}, defaults = options.none ?? {}) {
        return new Map([
            [10 /* Trace */, Logger.ensureDefaultLevel(options.trace, defaults, colorette_1.gray, 'TRACE')],
            [20 /* Debug */, Logger.ensureDefaultLevel(options.debug, defaults, colorette_1.magenta, 'DEBUG')],
            [30 /* Info */, Logger.ensureDefaultLevel(options.info, defaults, colorette_1.cyan, 'INFO')],
            [40 /* Warn */, Logger.ensureDefaultLevel(options.warn, defaults, colorette_1.yellow, 'WARN')],
            [50 /* Error */, Logger.ensureDefaultLevel(options.error, defaults, colorette_1.red, 'ERROR')],
            [60 /* Fatal */, Logger.ensureDefaultLevel(options.fatal, defaults, colorette_1.bgRed, 'FATAL')],
            [100 /* None */, Logger.ensureDefaultLevel(options.none, defaults, colorette_1.white, '')]
        ]);
    }
    static ensureDefaultLevel(options, defaults, color, name) {
        if (options)
            return new LoggerLevel_1.LoggerLevel(options);
        return new LoggerLevel_1.LoggerLevel({
            ...defaults,
            timestamp: defaults.timestamp === null ? null : { ...(defaults.timestamp ?? {}), color },
            infix: name.length ? `${color(name.padEnd(5, ' '))} - ` : ''
        });
    }
}
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map